@using NetBlocks.Models
@using NetBlocks.Utilities
@using SkipperModels.InputModels
@using Web.Shared.Result

@code {
    private bool _showVesselResults = false;
    
    [Parameter]
    public required RentalAgreementInputModel Context { get; set; }
}

<MudGrid Spacing="2" Class="mb-3">
    <!-- Action Buttons Row -->
    <MudItem xs="12" Class="d-flex align-center gap-3 mb-2">
        <MudButton StartIcon="@Icons.Material.Outlined.AddCircle" 
                   Color="Color.Primary" 
                   Variant="Variant.Outlined"
                   Size="Size.Small"
                   OnClick="@AddVessel">
            Add New Vessel
        </MudButton>
        
        <MudSpacer />
        
        <MudButton Color="Color.Primary" 
                   Variant="@(_showVesselResults ? Variant.Filled : Variant.Outlined)"
                   Size="Size.Small"
                   StartIcon="@(_showVesselResults ? Icons.Material.Outlined.ViewList : Icons.Material.Outlined.Search)"
                   OnClick="() => _showVesselResults = !_showVesselResults">
            @(_showVesselResults ? "Hide" : "Show") Table View
        </MudButton>
    </MudItem>
    
    <!-- Search and Select Row -->
    <MudItem xs="12" sm="@((!_showVesselResults) ? 6 : 12)" md="@((!_showVesselResults) ? 5 : 12)">
        <MudTextField Label="Search Vessels"
                      Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Outlined.Search" 
                      @bind-Value="_vesselSearch" 
                      DebounceInterval="500" 
                      OnDebounceIntervalElapsed="OnVesselSearchChanged"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Clearable="true" />
    </MudItem>
    
    @if (!_showVesselResults)
    {
        <MudItem xs="12" sm="6" md="7">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                <MudSelect Label="Select Vessel"
                           T="VesselInputModel"
                           @bind-Value="Context.Vessel"
                           For="() => Context.Vessel"
                           Variant="Variant.Outlined"
                           Style="flex-grow: 1;"
                           MaxHeight="300"
                           Clearable="true">
                    @foreach (VesselInputModel input in _vessels)
                    {
                        <MudSelectItem T="VesselInputModel" Value="input">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudStack Justify="Justify.FlexStart" Spacing="0">
                                    <MudText Typo="Typo.body2"><b>@input.Name</b></MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@input.RegistrationNumber</MudText>
                                </MudStack>
                                <MudSpacer />
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                    <MudText Typo="Typo.caption" Color="Color.Primary">
                                        @(LengthMeasureConverter.ToImperialString(input.Length)) × @(LengthMeasureConverter.ToImperialString(input.Beam))
                                    </MudText>
                                    <MudChip T="string" Size="Size.Small" Color="Color.Surface" Variant="Variant.Filled">
                                        @input.VesselType.ToString()
                                    </MudChip>
                                </MudStack>
                            </MudStack>
                        </MudSelectItem>
                    }
                    
                    @* Show loading indicator in dropdown *@
                    @if (_loadingMoreVessels)
                    {
                        <MudSelectItem T="VesselInputModel" Value="null" Disabled="true">
                            <MudStack AlignItems="AlignItems.Center" Class="pa-3">
                                <MudProgressCircular Size="Size.Small" Indeterminate />
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Loading more vessels...</MudText>
                            </MudStack>
                        </MudSelectItem>
                    }
                </MudSelect>
                
                @* Load More button next to dropdown *@
                @if (_hasMoreVessels && !_loadingMoreVessels)
                {
                    <MudTooltip Text="Load More Vessels">
                        <MudIconButton Icon="@Icons.Material.Outlined.Add" 
                                       Color="Color.Primary" 
                                       Variant="Variant.Outlined"
                                       Size="Size.Medium"
                                       OnClick="LoadMoreVessels" />
                    </MudTooltip>
                }
                
                @if (_loadingMoreVessels)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate />
                }
            </MudStack>
        </MudItem>
    }
</MudGrid>

@if (_showVesselResults)
{
    <MudTable Items="_vessels" 
              @bind-SelectedItem="Context.Vessel" 
              Class="mt-3"
              Dense="true"
              Hover="true"
              RowStyleFunc="@((VesselInputModel vessel, int index) => Context.Vessel?.RegistrationNumber == vessel.RegistrationNumber ? "background-color: var(--mud-palette-primary-lighten);" : "")">
        <HeaderContent>
            <MudTh>Reg. No.</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Length</MudTh>
            <MudTh>Beam</MudTh>
            <MudTh>Type</MudTh>
        </HeaderContent>
        <RowTemplate Context="row">
            <MudTd DataLabel="Reg. No.">@row.RegistrationNumber</MudTd>
            <MudTd DataLabel="Name">@row.Name</MudTd>
            <MudTd DataLabel="Length">@(LengthMeasureConverter.ToImperialString(row.Length))</MudTd>
            <MudTd DataLabel="Beam">@(LengthMeasureConverter.ToImperialString(row.Beam))</MudTd>
            <MudTd DataLabel="Type">@row.VesselType</MudTd>
        </RowTemplate>
    </MudTable>
    
    @* Load More section for table *@
    @if (_hasMoreVessels || _loadingMoreVessels)
    {
        <MudStack AlignItems="AlignItems.Center" Class="mt-4">
            @if (_loadingMoreVessels)
            {
                <MudProgressCircular Size="Size.Medium" Indeterminate />
                <MudText Typo="Typo.caption">Loading more vessels...</MudText>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Outlined.Add"
                           OnClick="LoadMoreVessels">
                    Load More Vessels (@(_vessels.Count()))
                </MudButton>
            }
        </MudStack>
    }
}

<MudPaper Class="rounded-tb-xl px-1 py-5" MaxWidth="md" Elevation="0">
    @if (_errorResult != null)
    {
    
        <MudText>Unable to load vessels:</MudText>
        <ResultDetails TResult="Result" Result="_errorResult"/>
    }
    else
    {
        <MudText Typo="Typo.h6">Selected Vessel:</MudText>
        @if (Context.Vessel != null)
        {
            <MudStack>
                <MudStack Row>
                    <MudText>Registration Number: </MudText>
                    <MudText>@Context.Vessel.RegistrationNumber</MudText>
                </MudStack>
                    
                <MudStack Row>
                    <MudText>Vessel Name: </MudText>
                    <MudText>@Context.Vessel.Name</MudText>
                </MudStack>
                    
                <MudStack Row>
                    <MudText>Length: </MudText>
                    <MudText>@(LengthMeasureConverter.ToImperialString(Context.Vessel.Length))</MudText>
                </MudStack>
                    
                <MudStack Row>
                    <MudText>Beam: </MudText>
                    <MudText>@(LengthMeasureConverter.ToImperialString(Context.Vessel.Beam))</MudText>
                </MudStack>
                    
                <MudStack Row>
                    <MudText>Vessel Type: </MudText>
                    <MudText>@Context.Vessel.VesselType</MudText>
                </MudStack>
            </MudStack>
        }
        else
        {
            <MudText>You must select a vessel.</MudText>
        }
    }
</MudPaper>