@typeparam TModel where TModel : new()
@implements IEditModal<TModel>


<MudDialog>
    <DialogContent>
        <EditForm EditContext="editContext" FormName="edit-model">
            <DataAnnotationsValidator/>
            @ChildContent
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" 
                    Variant="Variant.Filled" 
                    OnClick="Cancel">
            Cancel
        </MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled"
                    OnClick="Submit"
                    Disabled="@(!IsFormValid())">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public required TModel Model { get; set; }

    [Parameter]
    public required RenderFragment ChildContent { get; set; }

    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Model);
        editContext.OnValidationStateChanged += ValidationEvent;
    }

    private void ValidationEvent(object? sender, ValidationStateChangedEventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    private bool IsFormValid()
    {
        return !editContext.GetValidationMessages().Any();
    }

    private void Submit()
    {
        if (editContext.Validate())
        {
            ValidSubmit();
        }
    }

    private void ValidSubmit()
    {
        MudDialog.Close(DialogResult.Ok(Model));
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

}