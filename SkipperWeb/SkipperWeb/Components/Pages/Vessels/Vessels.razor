@using SkipperModels.Entities
@using SkipperWeb.ApiClients
@using SkipperWeb.Shared.Pagination

@inject VesselClient Client
@inject NavigationManager Nav

@rendermode InteractiveServer

@page "/vessels"

<h4>Vessels</h4>

<div class="container d-flex gap-2 align-items-center flex-row mb-2">
    <div class="flex-fill mr-2">
        <div class="input-group input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <InputText 
                class="form-control" 
                placeholder="Search vessels..."
                @bind-Value="ViewModel.SearchTerm" /> 
        </div>
    </div>
    <div class="flex-shrink-1">
        <button class="btn bg-primary btn-dark"
        @onclick="NewVessel">
            Enter New Vessel <span class="bi bi-plus-circle"></span>
        </button>
    </div>
</div>

@if (ViewModel.Page != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Reg. No.</th>
                <th scope="col">Name</th>
                <th scope="col">Length</th>
                <th scope="col">Beam</th>
                <th scope="col">Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Vessel vessel in ViewModel.Page.Items)
            {
                <tr>
                    <td>@vessel.RegistrationNumber</td>
                    <td>@vessel.Name</td>
                    <td>@vessel.Length</td>
                    <td>@vessel.Beam</td>
                    <td>@vessel.VesselType</td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination 
        Page="ViewModel.Page.Page" 
        PageCount="ViewModel.Page.TotalPages"
        OnPageChanged="PageChanged"
    />
}

@code {

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    private VesselsViewModel ViewModel { get; set; }

    protected async override Task OnInitializedAsync()
    {
        ViewModel = new(Client);
        await ViewModel.SetPage(Page);
    }

    protected async Task PageChanged(int page)
    {
        await ViewModel.SetPage(page);
    }

    private void NewVessel()
    {
        Nav.NavigateTo("/vessels/new");
    }

}