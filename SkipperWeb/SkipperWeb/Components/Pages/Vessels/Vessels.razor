@using SkipperModels.Entities
@using SkipperModels.Common
@using SkipperWeb.ApiClients
@using SkipperWeb.Shared.Pagination
@using SkipperWeb.Shared.Skeleton

@inject VesselClient Client
@inject NavigationManager Nav
@inject VesselsViewModel ViewModel

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/vessels"

<h4>Vessels</h4>

<div class="container d-flex gap-2 align-items-center flex-row mb-2">
    <div class="flex-fill mr-2">
        <div class="input-group input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <InputText 
            class="form-control" 
            placeholder="Search vessels..."
            @bind-Value="ViewModel.SearchTerm" /> 
        </div>
    </div>
    <div class="flex-shrink-1">
        <button class="btn bg-primary btn-dark"
        @onclick="NewVessel">
            Enter New Vessel <span class="bi bi-plus-circle"></span>
        </button>
    </div>
</div>

@if (ViewModel.Page != null && !_pageChanging)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Reg. No.</th>
                <th scope="col">Name</th>
                <th scope="col">Length</th>
                <th scope="col">Beam</th>
                <th scope="col">Type</th>
                <th scope="col"><b class="bi bi-pencil"></b></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Vessel vessel in ViewModel.Page.Items)
            {
                <tr>
                    <td scope="row">@vessel.RegistrationNumber</td>
                    <td scope="row">@vessel.Name</td>
                    <td scope="row">@vessel.Length</td>
                    <td scope="row">@vessel.Beam.ToString("N1")</td>
                    <td scope="row">@vessel.VesselType</td>
                    <td scope="row">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" />
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination PageChanged="PageChanged"
    PageSizeChanged="OnPageSizeChanged"
    Page="ViewModel.Page.Page" 
    PageSize="PageSize.GetValueOrDefault(10)"
    PageCount="ViewModel.Page.TotalPages"/>
}
else
{
    <TableSkeleton Rows="PageSize.GetValueOrDefault(10)" Columns="@VesselColumns"/>
}

@code {
    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }

    private static readonly Dictionary<string, int> VesselColumns = new()
    {
        { "Reg. No.", 5 },
        { "Name", 9 },
        { "Length", 4 },
        { "Beam", 4 },
        { "Type", 6 }
    };

    private bool _pageChanging = false;

    protected override async Task OnParametersSetAsync()
    {
        // If parameters are missing, set defaults and update URL
        if (Page == null || PageSize == null)
        {
            UpdatePageWithUrl(Page ?? 1, PageSize ?? 10, replace: true);
            return; // URL change will trigger OnParametersSetAsync again with proper values
        }

        _pageChanging = true;
        StateHasChanged();
        (int page, int pageSize) = await ViewModel.SetPage(Page.Value, PageSize.Value);

        if (page != Page || pageSize != PageSize)
        {
            UpdatePageWithUrl(page, pageSize, replace: true);
        }

        _pageChanging = false;
    }

    protected void PageChanged(int page)
    {
        UpdatePageWithUrl(page, PageSize.GetValueOrDefault(10));
    }
    
    protected void OnPageSizeChanged(int pageSize)
    {
        UpdatePageWithUrl(1, pageSize); // Reset to page 1 when page size changes
    }

    private void UpdatePageWithUrl(int page, int pageSize, bool replace = false)
    {
        var currentPage = Page;
        var currentPageSize = PageSize;
        
        if (currentPage == page && currentPageSize == pageSize) return;
        
        // Update URL - use replace: true to avoid adding to browser history for each page change
        var queryParams = new Dictionary<string, object?>
        {
            ["Page"] = page,
            ["PageSize"] = pageSize
        };

        var queryString = Nav.GetUriWithQueryParameters(queryParams);
        Nav.NavigateTo(queryString, forceLoad: false, replace: replace);
    }

    private void NewVessel()
    {
        Nav.NavigateTo("/vessels/new");
    }
}