@using NetBlocks.Models
@using SkipperModels
@using SkipperModels.Entities
@using SkipperWeb.ApiClients
@using SkipperWeb.Shared.Modal
@using SkipperWeb.Shared.UI

@rendermode InteractiveServer

@inject VesselClient Client

@page "/vessels/new"

<Modal @ref="resultModal" Title="Submitting Vessel">
    @if (serverValidationMessage is null)
    {
        <div class="container justify-content-center m-auto p-4">
            <Spinner />
        </div>
    }
    else if (serverValidationMessage == string.Empty)
    {
        <p>Vessel has been <span class="text-success">submitted</span>.</p>
    }
    else
    {
        <p>Vessel was <span class="text-warning">NOT</span> submitted</p>
        <p class="text-danger">@serverValidationMessage</p>
    }
</Modal>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi bi-plus-circle me-2"></i>
                        New Vessel Entry
                    </h4>
                </div>
                <div class="card-body">
                    <EditForm Model="Input" method="post" OnValidSubmit="Post" FormName="new-vessel">
                        <DataAnnotationsValidator/>
                        <ValidationSummary class="alert alert-danger" />

                        <div class="row g-3">
                            <!-- Registration Number -->
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <InputText @bind-Value="Input.RegistrationNumber" 
                                    id="Input.RegistrationNumber" 
                                    class="form-control"/>
                                    <label for="Input.RegistrationNumber">
                                        <i class="bi bi-card-text me-1"></i>Registration Number
                                    </label>
                                    <ValidationMessage For="() => Input.RegistrationNumber" class="text-danger small mt-1"/>
                                </div>
                            </div>

                            <!-- Vessel Name -->
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <InputText @bind-Value="Input.Name" 
                                    id="Input.Name" 
                                    class="form-control"/>
                                    <label for="Input.Name">
                                        <i class="bi bi-ship me-1"></i>Vessel Name
                                    </label>
                                    <ValidationMessage For="() => Input.Name" class="text-danger small mt-1"/>
                                </div>
                            </div>

                            <!-- Length -->
                            <div class="col-md-4">
                                <div class="form-floating">
                                    <InputNumber @bind-Value="Input.Length" 
                                    id="Input.Length" 
                                    class="form-control"
                                    placeholder="0.00"
                                    step="1"/>
                                    <label for="Input.Length">
                                        <i class="bi bi-arrows-expand me-1"></i>Length (m)
                                    </label>
                                    <ValidationMessage For="() => Input.Length" class="text-danger small mt-1"/>
                                </div>
                            </div>

                            <!-- Beam -->
                            <div class="col-md-4">
                                <div class="form-floating">
                                    <InputNumber @bind-Value="Input.Beam" 
                                    id="Input.Beam" 
                                    class="form-control"
                                    placeholder="0.00"
                                    step="1"/>
                                    <label for="Input.Beam">
                                        <i class="bi bi-arrows-expand-vertical me-1"></i>Beam (m)
                                    </label>
                                    <ValidationMessage For="() => Input.Beam" class="text-danger small mt-1"/>
                                </div>
                            </div>

                            <!-- Vessel Type -->
                            <div class="col-md-4">
                                <div class="form-floating">
                                    <InputSelect @bind-Value="Input.VesselType" 
                                    id="Input.VesselType" 
                                    class="form-select">
                                        <option value="">Select vessel type...</option>
                                        <option value="@VesselType.Sailboat">Sailboat</option>
                                        <option value="@VesselType.Motorboat">Motorboat</option>
                                        <option value="@VesselType.Other">Other</option>
                                    </InputSelect>
                                    <label for="Input.VesselType">
                                        <i class="bi bi-gear me-1"></i>Vessel Type
                                    </label>
                                    <ValidationMessage For="() => Input.VesselType" class="text-danger small mt-1"/>
                                </div>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <a href="/vessels" class="btn btn-outline-secondary">
                                        <i class="bi bi-arrow-left me-1"></i>
                                        Back to Vessels
                                    </a>
                                    <button type="submit" class="btn btn-dark bg-primary">
                                        <i class="bi bi-check-circle me-1"></i>
                                        Save Vessel
                                    </button>
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm] private NewVesselInputModel Input { get; set; } = new();

    private Modal resultModal = default!;
    private string? serverValidationMessage = null;

    public async Task Post(EditContext editContext)
    {
        serverValidationMessage = null;
        await resultModal.Open();

        await Task.Delay(6000);

        Vessel newVessel = new()
        {
            RegistrationNumber = Input.RegistrationNumber,
            Name = Input.Name,
            Length = Input.Length,
            Beam = Input.Beam,
            VesselType = Input.VesselType
        };

        ResultContainer<Vessel> result = await Client.Add(newVessel);
        if (result.Success)
        {
            serverValidationMessage = string.Empty;
        }
        else
        {
            serverValidationMessage = result.GetMessage();
            @* editContext.AddValidationMessage(() => Input.RegistrationNumber, result.Message); *@
        }
    }
}