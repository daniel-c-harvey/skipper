@using SkipperWeb.Components.Layout
@using Microsoft.AspNetCore.Components.Authorization
@using AuthBlocksWeb.Components
@using SkipperWeb.Components.Redirectors
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

<Router AppAssembly="typeof(Program).Assembly" AdditionalAssemblies="new[] { typeof(Client._Imports).Assembly, typeof(Shared._Imports).Assembly, typeof(AuthBlocksWeb._Imports).Assembly, typeof(AuthBlocksWeb.Client._Imports).Assembly }">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@_currentLayout">
            <NotAuthorized Context="authContext">
                <RedirectToLogin />
            </NotAuthorized>
            <Authorizing>
                <p>Authorizing...</p>
            </Authorizing>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <RedirectToNotFound/>
    </NotFound>
</Router>

@code {
    [Parameter] public Type AuthenticatedLayout { get; set; } = typeof(MainApplicationLayout);
    [Parameter] public Type UnauthenticatedLayout { get; set; } = typeof(MainHomeLayout);
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private Type _currentLayout = typeof(MainHomeLayout);

    protected override async Task OnParametersSetAsync()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            _currentLayout = authState.User.Identity?.IsAuthenticated == true 
                ? AuthenticatedLayout 
                : UnauthenticatedLayout;
        }
    }
}