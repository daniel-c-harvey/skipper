@page "/account/register"
@using Microsoft.AspNetCore.Components.Authorization
@using AuthBlocksWeb.Models.Api
@using AuthBlocksWeb.Services
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="Username" />
                <label for="username">Username</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <text> Creating account...</text>
                }
                else
                {
                    <text>Register</text>
                }
            </button>
            <div class="mt-3">
                <p>
                    <a href="/account/login">Already have an account? Log in</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? Message = "";
    private bool isLoading;

    [SupplyParameterFromForm]
    private RegisterRequest Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser()
    {
        isLoading = true;
        Message = "";
        StateHasChanged();

        try
        {
            var success = await AuthStateProvider.RegisterAsync(Input);
            
            if (success)
            {
                Navigation.NavigateTo(ReturnUrl ?? "/");
            }
            else
            {
                Message = "Registration failed. Please check your input and try again.";
            }
        }
        catch (Exception ex)
        {
            Message = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

<style>
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }
</style> 