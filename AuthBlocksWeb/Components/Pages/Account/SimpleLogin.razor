@page "/account/login"
@using AuthBlocksWeb.Models.Api
@using AuthBlocksWeb.Services
@using Microsoft.AspNetCore.Http
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Log in</PageTitle>

<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <text> Logging in...</text>
                        }
                        else
                        {
                            <text>Log in</text>
                        }
                    </button>
                </div>
                <div class="mt-3">
                    <p>
                        <a href="/account/register">Register as a new user</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private bool isLoading;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginRequest Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is null)
        {
            // Check if user is already authenticated
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                Navigation.NavigateTo(ReturnUrl ?? "/");
            }
        }
    }

    public async Task LoginUser()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var success = await AuthStateProvider.LoginAsync(Input);
            
            if (success)
            {
                Navigation.NavigateTo(ReturnUrl ?? "/");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

<style>
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }
</style> 