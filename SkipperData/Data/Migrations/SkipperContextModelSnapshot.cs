// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SkipperData.Data;

#nullable disable

namespace SkipperData.Data.Migrations
{
    [DbContext(typeof(SkipperContext))]
    partial class SkipperContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("skipper")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SkipperModels.Entities.AddressEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("addresses", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.BusinessCustomerContactsEntity", b =>
                {
                    b.Property<long>("BusinessCustomerProfileId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BusinessCustomerProfileEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmergency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BusinessCustomerProfileId", "ContactId");

                    b.HasIndex("BusinessCustomerProfileEntityId");

                    b.HasIndex("ContactId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("business_customer_contacts", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.BusinessCustomerProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("business_customer_profiles", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.ContactEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("contacts", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.IndividualCustomerProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("individual_customer_profiles", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.MemberCustomerProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("MembershipEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MembershipLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime?>("MembershipStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("MembershipEndDate");

                    b.HasIndex("MembershipLevel");

                    b.HasIndex("MembershipStartDate");

                    b.ToTable("MemberCustomerProfiles", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.SlipClassificationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BasePrice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("en-US-x-icu");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("MaxBeam")
                        .HasPrecision(19, 5)
                        .HasColumnType("numeric(19,5)");

                    b.Property<decimal>("MaxLength")
                        .HasPrecision(19, 5)
                        .HasColumnType("numeric(19,5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BasePrice");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.ToTable("slip_classifications", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.SlipEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .UseCollation("en-US-x-icu");

                    b.Property<long>("SlipClassificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("SlipNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SlipClassificationId");

                    b.HasIndex("SlipNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("slips", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.SlipReservationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("PriceRate")
                        .HasColumnType("integer");

                    b.Property<string>("PriceUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SlipId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VesselId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SlipId");

                    b.HasIndex("Status");

                    b.HasIndex("VesselId");

                    b.ToTable("slip_reservations", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Beam")
                        .HasPrecision(19, 5)
                        .HasColumnType("numeric(19,5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Length")
                        .HasPrecision(19, 5)
                        .HasColumnType("numeric(19,5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VesselType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.HasIndex("VesselType");

                    b.ToTable("vessels", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerCustomerEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerProfileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LicenseExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("CustomerProfileId", "CustomerProfileType");

                    b.ToTable("vessel_owner_customers", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerOrderEntity", b =>
                {
                    b.Property<long>("OrderTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Discriminator")
                        .HasColumnType("integer");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .UseCollation("en-US-x-icu");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .UseCollation("en-US-x-icu");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderTypeId", "OrderType");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("Status", "OrderDate");

                    b.ToTable("vessel_owner_orders", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("vessel_owner_profiles", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerVesselEntity", b =>
                {
                    b.Property<long>("VesselOwnerProfileId")
                        .HasColumnType("bigint");

                    b.Property<long>("VesselId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VesselOwnerProfileId", "VesselId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("VesselId")
                        .IsUnique();

                    b.ToTable("vessel_owner_vessels", "skipper");
                });

            modelBuilder.Entity("SkipperModels.Entities.BusinessCustomerContactsEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.BusinessCustomerProfileEntity", null)
                        .WithMany("BusinessCustomerContacts")
                        .HasForeignKey("BusinessCustomerProfileEntityId");

                    b.HasOne("SkipperModels.Entities.BusinessCustomerProfileEntity", "BusinessCustomerProfile")
                        .WithMany()
                        .HasForeignKey("BusinessCustomerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_business_customer_contacts_business_customer_profiles_Busi~1");

                    b.HasOne("SkipperModels.Entities.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessCustomerProfile");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SkipperModels.Entities.ContactEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SkipperModels.Entities.IndividualCustomerProfileEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SkipperModels.Entities.MemberCustomerProfileEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SkipperModels.Entities.SlipEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.SlipClassificationEntity", "SlipClassificationEntity")
                        .WithMany()
                        .HasForeignKey("SlipClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlipClassificationEntity");
                });

            modelBuilder.Entity("SkipperModels.Entities.SlipReservationEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.SlipEntity", "SlipEntity")
                        .WithMany()
                        .HasForeignKey("SlipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkipperModels.Entities.VesselEntity", "VesselEntity")
                        .WithMany()
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SlipEntity");

                    b.Navigation("VesselEntity");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerCustomerEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.VesselOwnerProfileEntity", "CustomerProfile")
                        .WithMany()
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerProfile");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerOrderEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.VesselOwnerProfileEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerProfileEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.ContactEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerVesselEntity", b =>
                {
                    b.HasOne("SkipperModels.Entities.VesselEntity", "Vessel")
                        .WithOne()
                        .HasForeignKey("SkipperModels.Entities.VesselOwnerVesselEntity", "VesselId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkipperModels.Entities.VesselOwnerProfileEntity", "VesselOwnerProfile")
                        .WithMany("VesselOwnerVessels")
                        .HasForeignKey("VesselOwnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vessel");

                    b.Navigation("VesselOwnerProfile");
                });

            modelBuilder.Entity("SkipperModels.Entities.BusinessCustomerProfileEntity", b =>
                {
                    b.Navigation("BusinessCustomerContacts");
                });

            modelBuilder.Entity("SkipperModels.Entities.VesselOwnerProfileEntity", b =>
                {
                    b.Navigation("VesselOwnerVessels");
                });
#pragma warning restore 612, 618
        }
    }
}
